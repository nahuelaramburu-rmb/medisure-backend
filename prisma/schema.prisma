generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model clinical_trials {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trial_identifier          String    @unique @db.VarChar(100)
  title                     String    @db.VarChar(500)
  status                    String    @default("planning") @db.VarChar(20)
  phase                     String?   @db.VarChar(10)
  start_date                DateTime? @db.Date
  end_date                  DateTime? @db.Date
  principal_investigator_id String?   @db.Uuid
  patient_count             Int       @default(0)
  created_at                DateTime  @default(now()) @db.Timestamptz(6)
  updated_at                DateTime  @default(now()) @db.Timestamptz(6)
  users                     users?    @relation(fields: [principal_investigator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model cohort_patients {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cohort_id        String    @db.Uuid
  patient_id       String    @db.Uuid
  added_by_user_id String    @db.Uuid
  added_at         DateTime  @default(now()) @db.Timestamptz(6)
  removed_at       DateTime? @db.Timestamptz(6)
  notes            String?
  users            users     @relation(fields: [added_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  research_cohorts cohorts   @relation(fields: [cohort_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients         patients  @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([cohort_id, patient_id, removed_at], map: "cohort_patients_unique_active")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model documents {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id          String            @db.Uuid
  document_type       String            @db.VarChar(50)
  uploaded_by_user_id String            @db.Uuid
  filename            String            @db.VarChar(255)
  file_type           String            @db.VarChar(20)
  file_size           BigInt
  storage_path        String            @db.VarChar(500)
  processing_status   String            @default("pending") @db.VarChar(20)
  processed_at        DateTime?         @db.Timestamptz(6)
  created_at          DateTime          @default(now()) @db.Timestamptz(6)
  patients            patients          @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users               users             @relation(fields: [uploaded_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medical_records     medical_records[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model patients {
  id                                       String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  medical_record_number                    String            @unique(map: "idx_patients_mrn") @db.VarChar(50)
  first_name                               String            @db.VarChar(100)
  last_name                                String            @db.VarChar(100)
  date_of_birth                            DateTime          @db.Date
  gender                                   String?           @db.VarChar(20)
  phone                                    String?           @db.VarChar(20)
  email                                    String?           @db.VarChar(255)
  blood_type                               String?           @db.VarChar(10)
  emergency_contact_name                   String?           @db.VarChar(200)
  emergency_contact_phone                  String?           @db.VarChar(20)
  primary_doctor_id                        String?           @db.Uuid
  created_by_user_id                       String            @db.Uuid
  created_at                               DateTime          @default(now()) @db.Timestamptz(6)
  updated_at                               DateTime          @default(now()) @db.Timestamptz(6)
  appointments                             appointments[]
  cohort_patients                          cohort_patients[]
  documents                                documents[]
  medical_records                          medical_records[]
  users_patients_created_by_user_idTousers users             @relation("patients_created_by_user_idTousers", fields: [created_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_patients_primary_doctor_idTousers  users?            @relation("patients_primary_doctor_idTousers", fields: [primary_doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  description String?
  permissions Json     @default("{}")
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users[]
}

model users {
  id                                                         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                      String            @unique(map: "idx_users_email") @db.VarChar(255)
  password_hash                                              String            @db.VarChar(255)
  role_id                                                    String            @db.Uuid
  first_name                                                 String            @db.VarChar(100)
  last_name                                                  String            @db.VarChar(100)
  professional_id                                            String?           @db.VarChar(50)
  department                                                 String?           @db.VarChar(100)
  is_active                                                  Boolean           @default(true)
  last_login                                                 DateTime?         @db.Timestamptz(6)
  created_at                                                 DateTime          @default(now()) @db.Timestamptz(6)
  updated_at                                                 DateTime          @default(now()) @db.Timestamptz(6)
  password_changed_at                                        DateTime?         @map(" password_changed_at") @db.Date
  appointments_appointments_created_by_user_idTousers        appointments[]    @relation("appointments_created_by_user_idTousers")
  appointments_appointments_doctor_idTousers                 appointments[]    @relation("appointments_doctor_idTousers")
  audit_logs                                                 audit_logs[]
  clinical_trials                                            clinical_trials[]
  cohort_patients                                            cohort_patients[]
  cohorts                                                    cohorts[]
  documents                                                  documents[]
  medical_records_medical_records_created_by_user_idTousers  medical_records[] @relation("medical_records_created_by_user_idTousers")
  medical_records_medical_records_verified_by_user_idTousers medical_records[] @relation("medical_records_verified_by_user_idTousers")
  patients_patients_created_by_user_idTousers                patients[]        @relation("patients_created_by_user_idTousers")
  patients_patients_primary_doctor_idTousers                 patients[]        @relation("patients_primary_doctor_idTousers")
  roles                                                      roles             @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_roles")
  chatMessagesSent                                           ChatMessage[]     @relation("UserMessages")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model appointments {
  id                                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id                                   String   @db.Uuid
  doctor_id                                    String   @db.Uuid
  appointment_type                             String   @db.VarChar(50)
  scheduled_at                                 DateTime @db.Timestamptz(6)
  duration_minutes                             Int      @default(30)
  status                                       String   @default("scheduled") @db.VarChar(20)
  chief_complaint                              String?
  notes                                        String?
  created_by_user_id                           String   @db.Uuid
  created_at                                   DateTime @default(now()) @db.Timestamptz(6)
  updated_at                                   DateTime @default(now()) @db.Timestamptz(6)
  users_appointments_created_by_user_idTousers users    @relation("appointments_created_by_user_idTousers", fields: [created_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_appointments_doctor_idTousers          users    @relation("appointments_doctor_idTousers", fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients                                     patients @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([doctor_id, scheduled_at], map: "idx_appointments_doctor_date")
  @@index([patient_id, scheduled_at], map: "idx_appointments_patient_date")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model cohorts {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String            @db.VarChar(200)
  description        String?
  department         String            @db.VarChar(100)
  created_by_user_id String            @db.Uuid
  is_active          Boolean           @default(true)
  patient_count      Int               @default(0)
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime          @default(now()) @db.Timestamptz(6)
  cohort_patients    cohort_patients[]
  users              users             @relation(fields: [created_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model medical_records {
  id                                               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id                                       String     @db.Uuid
  document_id                                      String?    @db.Uuid
  record_type                                      String     @db.VarChar(50)
  record_date                                      DateTime   @db.Date
  data                                             Json
  confidence_score                                 Decimal?   @db.Decimal(3, 2)
  verified_by_user_id                              String?    @db.Uuid
  verified_at                                      DateTime?  @db.Timestamptz(6)
  created_by_user_id                               String     @db.Uuid
  created_at                                       DateTime   @default(now()) @db.Timestamptz(6)
  updated_at                                       DateTime   @default(now()) @db.Timestamptz(6)
  users_medical_records_created_by_user_idTousers  users      @relation("medical_records_created_by_user_idTousers", fields: [created_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  documents                                        documents? @relation(fields: [document_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients                                         patients   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_medical_records_verified_by_user_idTousers users?     @relation("medical_records_verified_by_user_idTousers", fields: [verified_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([data], map: "idx_medical_records_data_gin", type: Gin)
  @@index([patient_id, record_date(sort: Desc)], map: "idx_medical_records_patient_date")
  @@index([record_type], map: "idx_medical_records_type")
}

model audit_logs {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String   @db.Uuid
  action      String   @db.VarChar(50)
  entity_type String   @db.VarChar(50)
  entity_id   String   @db.Uuid
  changes     Json?
  ip_address  String?  @db.Inet
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ChatRoom {
  id        String        @id @default(uuid())
  name      String?
  type      String // Ej: 'general', 'diagnosis', etc.
  createdBy String // ID del usuario creador
  members   ChatMember[]  @relation("RoomMembers")
  messages  ChatMessage[] @relation("RoomMessages")
  createdAt DateTime      @default(now())
}

model ChatMember {
  id         String   @id @default(uuid())
  chatRoomId String
  userId     String // Usuario que pertenece a la sala
  joinedAt   DateTime @default(now())

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], name: "RoomMembers")
}

model ChatMessage {
  id         String   @id @default(uuid())
  chatRoomId String
  senderId   String
  content    String
  mentions   String[] // Lista de IDs de usuarios mencionados
  sentAt     DateTime @default(now())

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], name: "RoomMessages")
  sender   users    @relation("UserMessages", fields: [senderId], references: [id])
}
